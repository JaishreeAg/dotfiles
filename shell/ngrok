ngrokify() { (
  set -eu
  [[ -n "${NGROK_DEBUG:-}" ]] && set -x

  if ! command -v ngrok > /dev/null ; then
    echo '`ngrok` is not installed'
    return 1
  fi

  readonly local name="${1:-ssh}"
  readonly local port="${2:-6666}"
  readonly local jump="${3:-do}"

  readonly local conf_file="${HOME}/.ngrok2/ngrok.yml"
  readonly local required_params="console_ui: false"
  if ! grep --quiet "${required_params}" "${conf_file}" ; then
    echo "Did not find required params '${required_params}' in '${conf_file}'. ngrok won't work"
    return 1
  fi
  pkill -f "ngrok start ${name}" || true
  ngrok start "${name}" &
  readonly local ngrok_pid=$!
  # this gets filled in later, maybe
  local ssh_pid
  # Kill ngrok when somebody kills this function
  readonly local codes=SIGINT SIGTERM EXIT
  trap "trap '' ${codes} && echo Killing ngrok && kill ${ngrok_pid}" ${codes}

  local tunnel
  local count=0
  sleep 0.5

  while true ; do
    if (( ${count} >= 10 )) ; then
      echo "Tunnel did not come up after ${count} attempts"
      return 2
    fi
    set +e
    tunnel="$(curl --silent localhost:4040/api/tunnels/ | jq -r .tunnels[0].public_url)"
    set -e
    if [[ "${tunnel}" != "null" && -n "${tunnel}" ]] ; then
      echo "Tunnel came up cleanly after ${count} seconds: ${tunnel}"
      break
    fi
    (( count++ )) || true
    sleep 0.5
  done

  local ngrok_host="$(echo ${tunnel} | sed 's|.*://\(.*\):.*|\1|')"
  local ngrok_port="$(echo ${tunnel} | sed 's|.*://.*:\(.*\)|\1|')"
  echo "ngrok.io host:${ngrok_host} port:${ngrok_port}"

  set +e
  ssh -o "ExitOnForwardFailure yes" -fN "${jump}" -R *:${port}:${ngrok_host}:${ngrok_port}
  ssh_pid=$!

  trap "trap '' ${codes} && echo Killing ngrok && kill ${ngrok_pid} ${ssh_pid}" ${codes}

  if ! kill -0 ${ssh_pid} ; then
    ssh_pid=""
    echo "Unable to SSH to ${jump}"
    return 1
  fi
  set -e

  echo "Tunnel and jump are up and running"
  echo
  echo "Run the following command from any computer:"
  echo
  echo "ssh -p ${port} ${jump}"

  wait
)}
