OPTOUT="${HOME}/.config/.noautoupdate"
[[ -f ${OPTOUT} ]] && return

UPDATE_INTERVAL="+7"
SHOULD_UPDATE=0
TSFILE="${HOME}/.config/.lastupdatecheck"
if [[ ! -f ${TSFILE} ]] ; then
  touch "${TSFILE}"
  SHOULD_UPDATE=1
elif [[ -n "$(find "${TSFILE}" -mtime ${UPDATE_INTERVAL} -print)" ]] ; then
  SHOULD_UPDATE=1
fi

_update() {
  set -e
  echo -e "${GRAY_BG}Checking for dotfiles update.${RESET}"
  echo -e "To disable, touch ${BOLD}'${OPTOUT}'${RESET}"
  pushd "${DOTFILES}"
  command -v diff-so-fancy >/dev/null || source "${DOTFILES}/shell/path"
  export PREVIOUS_DOTFILES="$(git rev-parse HEAD)"
  if ! git fetch ; then
    _internal_error "Unable to 'git fetch'. Check your SSH agent?"
    set +e
    popd
    return 0
  elif [[ -z "$(git log HEAD..origin/master)" ]] ; then
    echo -e "${GRAY_BG}Already up-to-date, skipping install${RESET}"
    set +e
    popd
    return 0
  else
    local refresh_output="$(git refresh)"
    if [[ "${refresh_output}" =~ '.*Could not.*agent.*' ]] ; then
      echo -e "${BOLD}${RED_FG}Unable to check for updates. Check your SSH agent?"
      set +e
      popd
      return 0
    fi
  fi
  ${DOTFILES}/install.sh
  unset PREVIOUS_DOTFILES

  touch "${TSFILE}"
  popd
  set +e
}

(( ${SHOULD_UPDATE} == 0 )) || _update
unset -f _update
